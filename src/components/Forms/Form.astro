---
/** Generic <Form> wrapper
 *
 * Props
 * ─────────────────────────────────────────────────────────────
 * name            – unique Netlify form name (default "generic-form")
 * method          – HTTP method (default "post")
 * action          – optional success redirect URL
 * netlify         – boolean flag to inject Netlify attrs (default true)
 * honeypotName    – name of the hidden honeypot field (default "bot-field")
 * class           – Tailwind classes for the outer container
 * formLabel       – optional label for the form
 * labelClass      – Tailwind classes for the form label
 * enableSuccessBanner – boolean flag to show a success banner
 * successBannerMessage – message to show in the success banner
 * successBannerClass – Tailwind classes for the success banner
 * formClass       – extra classes on <form>
 * submitClass     – default Tailwind classes for the fallback button
 * submitLabel     – text for the fallback button (default "Submit")
 *
 * Slots
 * ─────────────────────────────────────────────────────────────
 * default         – your input fields
 * submit          – optional custom submit content; if omitted we render a
 *                   default <Button />
 */
import Button from "@/components/Button";

const {
  name = "generic-form",
  method = "post",
  action,
  class: className = "",
  formLabel = "",
  labelClass = "",
  formClass = "w-[90vw] lg:w-full p-[var(--spacing-md)]",
  submitClass = "w-full mt-[var(--spacing-sm)] justify-center cursor-pointer",
  submitLabel = "Submit",
  enableSuccessBanner = false,
  successBannerMessage = "Thank you for your submission!",
  successBannerClass = "p-[var(--spacing-sm)] bg-primary text-bg border border-[var(--color-border)]",
} = Astro.props;
---

<div class={className}>
  {formLabel && (
    <label class={labelClass} for={name}>
      {formLabel}
    </label>
  )}
  <form
    id={name}
    name={name}
    method={method}
    action={action}
    class={formClass}
    data-success-banner={enableSuccessBanner}
    data-success-message={successBannerMessage}
    data-success-class={successBannerClass}
  >
    <slot />

    {Astro.slots.has("submit") ? (
      <slot name="submit" />
    ) : (
      <Button type="submit" variant="primary" className={submitClass}>
        {submitLabel}
      </Button>
    )}
  </form>
</div>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    document
      .querySelectorAll('form[data-success-banner="true"]')
      .forEach((form) => {
        form.addEventListener("submit", async (e) => {
          e.preventDefault();
          const data = new URLSearchParams(new FormData(form));
          await fetch(form.action || "/", {
            method: form.method.toUpperCase() || "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: data.toString(),
          });
          const banner = document.createElement("div");
          banner.className = form.dataset.successClass;
          banner.textContent = form.dataset.successMessage;
          form.style.display = "none";
          form.parentNode.insertBefore(banner, form.nextSibling);
        });
      });
  });
</script>
