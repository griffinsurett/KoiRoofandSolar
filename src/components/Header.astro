---
import { ContactData, SiteData } from "@/content/SiteData";
import { buildMenuQueries } from "@/utils/ArrayQueryUtils";
import Menu from "../components/Menu/Menu.astro";
import MenuItem from "../components/Menu/BarMenu/MenuItem.astro"; // default main menu item
import { Image } from "astro:assets";
import Button from "@/components/Button.jsx";
import PhoneIcon from "@/components/Phone"; // Import the phone icon

const MainNavMenu = [
  { id: "home", label: "Home", slug: "/", weight: 100, position: "prepend" },
  { id: "about", label: "About Us", slug: "/about-us" },
  {
    id: "contact",
    label: "Contact",
    slug: "/contact-us",
    position: "append",
    weight: 100,
  },
];

const breakpoint = "lg";
---

<header
  class="flex justify-center items-center w-full h-[10vh] xl:h-[16vh] bg-transparent fixed z-[10000]" id="site-header"
>
  <div class="flex items-center justify-between w-9/10 h-full">
    <a href="/" class="flex items-center order-2 lg:order-first">
      <Image
        src={SiteData.logo.src}
        alt={`${SiteData.title} logo`}
        class="h-17 xl:h-19 w-auto"
        format="webp"
        loading="eager"
        quality="low"
        fetchpriority="high"
        aria-hidden="true"
      />
      <!-- <div class="header-text" aria-label="Site identity">
      <div class="text-xl font-bold">{SiteData.title}</div>
      <div class="text-sm">{SiteData.tagline}</div>
    </div>     -->
    </a>

    <Menu
      items={await buildMenuQueries({ MainNavMenu })}
      breakpoint={breakpoint}
      listClass="flex flex-row text-bg"
      barMenu={{
        menuItem: {
          component: MenuItem,
          class:
            "menu-item uppercase font-medium tracking-wide hover:text-accent px-[var(--spacing-sm)] py-[var(--spacing-md)]",
          activeClass: "text-accent font-bold",
        },
        submenuItem: {
          component: MenuItem,
          class: "submenu-class text-text shadow-inner-outer bg-bg",
          activeClass: "text-bg",
        },
        listClass: "flex gap-[var(--spacing-xl)]",
      }}
      hamburgerMenu={{
        hamburgerIconClass: "custom-hamburger-icon text-bg",
        hamburgerIconTransform: true,
        menuBackground:
          "bg-primary flex items-center justify-center w-full bg-opacity-75",
        menuItem: { component: MenuItem, class: "text-bg h2" },
        submenuItem: { component: MenuItem, class: "mobile-submenu-item" },
        listClass: "flex flex-col",
        closeButton: false,
      }}
      isHierarchical={true}
    />

      <div class="order-last">
        <Button
          href={`tel:${ContactData.phone}`}
          variant="secondary"
          className="hidden xl:flex"
          showIcon={true}
          iconProps={{
            element: PhoneIcon,
            position: "left",
            className: "mr-[var(--spacing-sm)]",
          }}
        >
          Call Us
        </Button>
        <a 
          class="flex xl:hidden text-accent"
          href={`tel:${ContactData.phone}`}>
          <PhoneIcon className="h-8 w-auto"/>
          </a>
        </div>

  </div>
</header>
<script is:inline client:idle>
  const header = document.getElementById("site-header");                        // select header :contentReference[oaicite:0]{index=0}
  const menuLinks = document.querySelectorAll(".menu-item");                    // select bar-menu links :contentReference[oaicite:1]{index=1}
  const hamburgerIcon = document.querySelector(".custom-hamburger-icon");       // select hamburger icon :contentReference[oaicite:2]{index=2}
  const ACTIVE_CLASS = "text-accent";                                           // your active link color

  function onScroll() {
    const scrolled = window.scrollY > 50;                                       // get vertical scroll :contentReference[oaicite:3]{index=3}

    // Header background + shadow
    header.classList.toggle("bg-bg", scrolled);                              // add/remove bg & shadow :contentReference[oaicite:4]{index=4}
    header.classList.toggle("shadow-md", scrolled);
    header.classList.toggle("bg-transparent", !scrolled);

    // Bar-menu links: non-active only
    menuLinks.forEach((link) => {
      if (link.classList.contains(ACTIVE_CLASS)) return;                        // skip active :contentReference[oaicite:5]{index=5}

      link.classList.toggle("text-primary", scrolled);                         // toggle text color :contentReference[oaicite:6]{index=6}
      link.classList.toggle("text-bg", !scrolled);
    });

    // Hamburger icon: always toggle
    if (hamburgerIcon) {
      hamburgerIcon.classList.toggle("text-primary", scrolled);                 // switch between text-primary/text-bg :contentReference[oaicite:7]{index=7}
      hamburgerIcon.classList.toggle("text-bg", !scrolled);
    }
  }

  window.addEventListener("scroll", onScroll);                                  // listen for scroll :contentReference[oaicite:8]{index=8}
  onScroll();                                                                    // initialize on load
</script>
