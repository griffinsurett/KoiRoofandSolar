---
// src/components/Header.astro
import { ContactData, SiteData } from "@/content/SiteData";
import LogoBGWhite from "@/assets/logo3.png";
import { buildMenuQueries } from "@/utils/ArrayQueryUtils";
import Menu from "../components/Menu/Menu.astro";
import MenuItem from "../components/Menu/BarMenu/MenuItem.astro";
import { Image } from "astro:assets";
import Button from "@/components/Button.jsx";
import PhoneIcon from "@/components/Phone";
import { MainNavMenu } from "@/queries/MainNavMenu";

const breakpoint = "lg";
---

<header
  id="site-header"
  class="fixed top-0 w-full h-[12vh] md:h-[14vh] flex justify-center items-center bg-transparent z-[10000]"
>
  <div class="w-9/10 h-full flex items-center justify-between">
    <a href="/" class="order-2 lg:order-first flex items-center">
      <!-- Default logo -->
      <Image
        id="logo-default"
        src={SiteData.logo.src}
        alt={`${SiteData.title} logo`}
        class="hidden h-17 xl:h-22 w-auto"
        format="webp"
        loading="eager"
        quality="low"
        fetchpriority="high"
        aria-hidden="true"
      />
      <!-- White-on-dark logo -->
      <Image
        id="logo-white"
        src={LogoBGWhite}
        alt={`${SiteData.title} logo (white)`}
        class="hidden h-17 xl:h-22 w-auto"
        format="webp"
        loading="eager"
        quality="low"
        fetchpriority="high"
        aria-hidden="true"
      />
    </a>

    <Menu
      items={await buildMenuQueries({ MainNavMenu })}
      breakpoint={breakpoint}
      listClass="flex flex-row text-bg"
      barMenu={{
        menuItem: {
          component: MenuItem,
          class:
            "menu-item text-lg uppercase tracking-wide hover:text-accent px-[var(--spacing-sm)] py-[var(--spacing-md)]",
          activeClass: "text-accent font-bold",
        },
        submenuItem: {
          component: MenuItem,
          class: "submenu-class text-text shadow-inner-outer bg-bg",
          activeClass: "text-bg",
        },
        listClass: "flex gap-[var(--spacing-xl)]",
      }}
      hamburgerMenu={{
        hamburgerIconClass: "custom-hamburger-icon text-bg",
        hamburgerIconTransform: true,
        menuBackground:
          "bg-primary flex items-center justify-center w-full bg-opacity-75",
        menuItem: { component: MenuItem, class: "text-bg h1 uppercase" },
        submenuItem: { component: MenuItem, class: "mobile-submenu-item" },
        listClass: "flex flex-col",
        closeButton: false,
      }}
      isHierarchical={true}
    />

    <div class="order-last flex items-center">
      <Button
        href={`tel:${ContactData.phone}`}
        variant="secondary"
        className="hidden xl:flex"
        showIcon={true}
        iconProps={{
          element: PhoneIcon,
          position: "left",
          className: "mr-[var(--spacing-sm)]",
        }}
      >
        Call Us
      </Button>

      <a href={`tel:${ContactData.phone}`} class="flex xl:hidden text-accent">
        <PhoneIcon className="h-8 w-auto" />
      </a>
    </div>
  </div>
</header>

<script is:inline client:idle>
  const header = document.getElementById("site-header");
  const menuLinks = document.querySelectorAll(".menu-item");
  const hamburgerIcon = document.querySelector(".custom-hamburger-icon");
  const menuToggle = document.getElementById("hamburger-toggle");
  const logoDefault = document.getElementById("logo-default");
  const logoWhite = document.getElementById("logo-white");
  const ACTIVE_CLASS = "text-accent";

  function updateLogo(scrolled) {
    if (menuToggle?.checked || scrolled) {
      logoDefault.classList.add("hidden");
      logoWhite.classList.remove("hidden");
    } else {
      logoDefault.classList.remove("hidden");
      logoWhite.classList.add("hidden");
    }
  }

  function onScroll() {
    const scrolled = window.scrollY > 50;

    header.classList.remove("bg-primary");
    header.classList.toggle("bg-bg", scrolled);
    header.classList.toggle("shadow-md", scrolled);
    header.classList.toggle("bg-transparent", !scrolled);

    menuLinks.forEach((link) => {
      if (link.classList.contains(ACTIVE_CLASS)) return;
      link.classList.toggle("text-primary", scrolled);
      link.classList.toggle("text-bg", !scrolled);
    });

    if (hamburgerIcon) {
      hamburgerIcon.classList.toggle("text-primary", scrolled);
      hamburgerIcon.classList.toggle("text-bg", !scrolled);
    }

    updateLogo(scrolled);
  }

  if (menuToggle) {
    menuToggle.addEventListener("change", () => {
      if (menuToggle.checked) {
        header.classList.add("bg-primary");
        header.classList.remove("shadow-md", "bg-white", "bg-transparent");
        hamburgerIcon?.classList.add("text-bg");
        hamburgerIcon?.classList.remove("text-primary");
        updateLogo(true);
      } else {
        onScroll();
      }
    });
  }

  window.addEventListener("scroll", onScroll);
  onScroll();

  // ─── ensure the hamburger icon resets on mobile link clicks ───
  document
    .querySelectorAll(".hamburger-menu-item a")
    .forEach((link) =>
      link.addEventListener("click", () => {
        if (menuToggle.checked) {
          menuToggle.checked = false;
          // fire the native change so our handler runs
          menuToggle.dispatchEvent(
            new Event("change", { bubbles: true })
          );
        }
      })
    );
</script>
