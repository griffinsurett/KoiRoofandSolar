---
// src/components/LoopComponents/VideoCard.astro

import Video from "../Video.astro";
import { Image } from "astro:assets";

const { item } = Astro.props;
const videoSrc = item.data.video;
const posterSrc = item.data.featuredImage;
---
<li class="video-card break-inside-avoid mb-[var(--spacing-md)] self-start relative border-radius w-full overflow-hidden shadow-xs transition-shadow">
  {videoSrc ? (
    <div class="relative w-full">
      <!-- Video element without native controls -->
      <Video
        src={videoSrc}
        poster={posterSrc}
        muted
        loop
        playsinline
        class="w-full h-auto object-cover object-center"
      />
      <button
        class="play-button absolute inset-0 flex items-center justify-center bg-heading/50 text-white text-4xl opacity-100 transition-opacity"
        aria-label="Play video"
      >
        â–¶
      </button>
    </div>
  ) : posterSrc ? (
    <Image
      src={posterSrc}
      alt={item.data.title || item.slug}
      format="webp"
      loading="lazy"
      fetchpriority="low"
      quality="low"
      class="w-full h-auto object-cover object-center"
    />
  ) : null}
</li>

<script is:inline client:load>
  // Attach play/pause behavior to each video card
  document.querySelectorAll('.video-card').forEach(card => {
    const video = card.querySelector('video');
    const btn = card.querySelector('.play-button');
    if (!video || !btn) return;

    // Play on button click
    btn.addEventListener('click', () => {
      video.play();
    });

    // Hide overlay when video plays
    video.addEventListener('play', () => {
      btn.style.opacity = '0';
    });

    // Show overlay when video pauses or ends
    video.addEventListener('pause', () => {
      btn.style.opacity = '1';
    });
    video.addEventListener('ended', () => {
      btn.style.opacity = '1';
    });
  });
</script>
